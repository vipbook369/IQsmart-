import os
import time
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

# Constants
BOT_TOKEN = "8181288340:AAG8JEa2GXGstmgt1yzCrBJzhCkEweiBtl0"
SESSION_TIMEOUT = 1800  # 30 minutes
user_sessions = {}

# Trend classification helpers
def classify_number(n):
    return {
        "big_small": "Big ☝🏻" if n >= 5 else "Small 👇🏻",
        "color": "Green ☝🏻" if n in [1,3,5,7,9] else "Red 👇🏻",
        "volatility": "Volatile Green" if n == 5 else "Volatile Red" if n == 0 else "Stable"
    }

def analyze_prng(numbers):
    big_small = [classify_number(n)["big_small"] for n in numbers]
    color = [classify_number(n)["color"] for n in numbers]

    big_ratio = big_small.count("Big ☝🏻") / len(numbers)
    small_ratio = big_small.count("Small 👇🏻") / len(numbers)
    green_ratio = color.count("Green ☝🏻") / len(numbers)
    red_ratio = color.count("Red 👇🏻") / len(numbers)

    trends = {
        "Big %": round(big_ratio * 100, 2),
        "Small %": round(small_ratio * 100, 2),
        "Green %": round(green_ratio * 100, 2),
        "Red %": round(red_ratio * 100, 2)
    }

    suggestion = "❌ Ignore Trade (69%)"
    max_confidence = max(trends.values())

    if 70 <= max_confidence < 75:
        suggestion = "✅ Best Trade 🔄"
    elif 75 <= max_confidence < 85:
        suggestion = "🎯 Sniper Trade 🧠"
    elif 85 <= max_confidence < 90:
        suggestion = "🚀 High Prob. Trade 💰"
    elif max_confidence >= 90:
        suggestion = "💥 Killer Trade 🔥"

    return trends, suggestion

# Session tracker
def start_session(user_id):
    user_sessions[user_id] = {
        "last_active": datetime.now(),
        "feedback": []
    }

def update_session(user_id):
    if user_id not in user_sessions or datetime.now() - user_sessions[user_id]["last_active"] > timedelta(seconds=SESSION_TIMEOUT):
        start_session(user_id)
    user_sessions[user_id]["last_active"] = datetime.now()

# Commands
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_session(update.effective_user.id)
    await update.message.reply_text("👋 Welcome to IQsmart Bot! Send me 100–300 numbers (0–9) separated by space or comma for analysis.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    update_session(user_id)
    text = update.message.text

    try:
        nums = [int(x) for x in text.replace(",", " ").split() if x.strip().isdigit() and 0 <= int(x) <= 9]
        if len(nums) < 30:
            await update.message.reply_text("⚠️ Please send at least 30 numbers.")
            return
        trends, suggestion = analyze_prng(nums)
        response = "📊 Analysis Results:\n"
        for key, val in trends.items():
            response += f"{key}: {val}%\n"
        response += f"\n🧠 Suggestion: {suggestion}"
        await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text("❌ Error in input. Please send digits 0-9 separated by space or comma.")

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    update_session(user_id)
    user_sessions[user_id]["feedback"].append(update.message.text)
    await update.message.reply_text("✅ Feedback received! Thank you.")

# Main run
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("feedback", feedback))
    app.run_polling()
